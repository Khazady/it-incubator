{"version":3,"sources":["api/api.ts","utils/error-utils.ts","features (pages)/Login/auth-reducer.ts","app/app-reducer.ts","features (pages)/TodolistsList/todolists-reducer.ts","features (pages)/TodolistsList/tasks-reducer.ts","app/store.ts","components (common)/AddItemForm/AddItemForm.tsx","components (common)/EditableSpan/EditableSpan.tsx","features (pages)/TodolistsList/Todolist/Task/Task.tsx","features (pages)/TodolistsList/Todolist/Todolist.tsx","features (pages)/TodolistsList/TodolistsList.tsx","components (common)/ErrorSnackbar/ErrorSnackbar.tsx","features (pages)/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todolistsAPI","get","then","res","data","title","post","todolistId","delete","put","tasksAPI","taskId","model","authAPI","loginData","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setAppInitializedAC","initState","updateTaskTC","businessModel","getState","task","tasks","find","t","id","serverModal","deadline","description","priority","startDate","resultCode","updateTaskAC","catch","console","warn","rootReducer","combineReducers","todolists","state","action","filter","tl","todolist","entityStatus","map","todoListId","stateCopy","forEach","app","auth","store","createStore","applyMiddleware","thunk","window","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","variant","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","Task","useDispatch","RemoveTask","useCallback","removeTaskAC","ChangeTaskStatus","newStatusValue","checked","Completed","New","ChangeTaskTitle","newValue","key","className","Checkbox","Delete","Todolist","demo","tasksForTodoList","allTodoListTasks","useSelector","addTask","item","addTaskTC","removeTodoList","removeTodolistAC","changeTodoListTitle","newTitle","changeTodoListTitleAC","changeFilter","changeTodoListFilterAC","useEffect","setTasksAC","items","ButtonGroup","Button","endIcon","Home","TodolistsList","addTodoList","addTodolistTC","Grid","container","style","padding","spacing","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","exact","path","render","from","top","textAlign","width","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6929c261.chunk.js","sourcesContent":["//DAL крайняя точка клиента перед сервером, поэтому здесь не может быть других импортов кроме axios\r\nimport axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    headers: {\r\n        \"API-KEY\": \"a13d3464-2e9e-4272-8cbf-d0d1a9048e02\"\r\n    }\r\n});\r\n\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        //оставляем в ответе только дату\r\n        //generic того, что нам возвращает этот метод (в документации)\r\n        return instance.get<Array<TodolistServerType>>(\"todo-lists\").then(res => res.data)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item: TodolistServerType}>>(\"todo-lists\", {title: title}).then(res => res.data)\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`).then(res => res.data)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title}).then(res => res.data)\r\n    }\r\n}\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        //получаем порцию тасок конкретного todolist\r\n        //generic того, что нам возвращает этот метод (в документации)\r\n        //в Item будет массив объектов {items:TaskType}\r\n        return instance.get<GetTaskResponse<Array<TaskType>>>(`todo-lists/${todolistId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title}).then(res => res.data)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`).then(res => res.data)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model).then(res => res.data)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(loginData: LoginParamsType) {\r\n        //возвращает promise\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, loginData).then(res => res.data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id:number, email: string, login: string}>>(`auth/me`).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`).then(res => res.data)\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\n//с API начинается разработка приложения, поэтому типы того, что приходит с сервера описываем в API\r\nexport type TodolistServerType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n//item это переменная, которую вставляем в generic при использовании (например <ResponseType<{item: TodolistType}>> ) --\r\n//-- значит, что в data будет item, в других случаях data - пустой объект ( <ResponseType<{}>> )\r\n//в generic можно передать дефолт значение, если не писать уточняющий generic, то Item = {}\r\nexport type ResponseType<Item = {}> = {\r\n    resultCode: number,\r\n    messages: Array<string>\r\n    data: Item\r\n}\r\ntype GetTaskResponse<Item = {}> = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Item\r\n}\r\n//особый тип/переменная, расширяющий boolean, так как false и true не хватает для статусов (запросов)\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string | null\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string | null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n","import { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    //если длина существуетч(псевдоистина)\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n//ловим ошибку(код ответа (напр 401) или нет инета(failed)) и диспатчим статус крутилки и сообщение ошибки в алерт\r\n//прописываем это в .catch, т.к. в случае такой ошибки мы не попадаем в .then\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {Dispatch} from 'redux'\r\nimport {\r\n    SetAppErrorActionType,\r\n    SetAppInitializedActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n  ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (loginData: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n      .then(res => {\r\n          if (res.resultCode === 0) {\r\n              dispatch(setIsLoggedInAC(true))\r\n              dispatch(setAppStatusAC('succeeded'))\r\n          } else {\r\n              handleServerAppError(res, dispatch)\r\n          }\r\n      }).catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n      .then(res => {\r\n          if (res.resultCode === 0) {\r\n              dispatch(setIsLoggedInAC(false))\r\n              dispatch(setAppStatusAC('succeeded'))\r\n          } else {\r\n              handleServerAppError(res, dispatch)\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          handleServerNetworkError(error, dispatch)\r\n      })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType =\r\n  | ReturnType<typeof setIsLoggedInAC>\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n  | SetAppInitializedActionType\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features (pages)/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n// thunks\r\n//при монтировании апп запрашиваем залогинен ли пользователь\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n            handleServerAppError(res, dispatch)\r\n        }\r\n        //после получения ответа инициализируем приложение\r\n        dispatch(setAppInitializedAC(true))\r\n    }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n        //после получения ответа инициализируем приложение\r\n        dispatch(setAppInitializedAC(true))\r\n    })\r\n}\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    error: string | null\r\n    //проверили юзера, получили настройки\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\r\ntype ActionsType =\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n  | SetAppInitializedActionType","import {Dispatch} from \"redux\";\r\nimport {todolistsAPI, TodolistServerType} from \"../../api/api\";\r\nimport {\r\n    SetAppStatusActionType,\r\n    setAppStatusAC,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    RequestStatusType\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n//reducer\r\nconst initState: Array<TodolistBusinessType> = []\r\nexport const todolistsReducer = (state: Array<TodolistBusinessType> = initState, action: ActionsType): Array<TodolistBusinessType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            //добавляем в серверный тудулист фильтр\r\n            return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            //если id листа == id в action, то возвращаем копию листа (...tl) и меняем title на тот, кот. в action\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            //если id листа == id в action, то возвращаем копию листа (...tl) и меняем filter на тот, кот. в action\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            //на входе в этот AC приходит серверТайп, преобразовываем его в бизнесТайп, добавляя фильтр\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            //similarly to change-tl-title\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\n\r\n//альтернативная запись функции, кот. возвращ. только объект\r\n//as const чтобы typescript воспринимал ADD-TODOLIST не как строку, а как конст(именно весь объект)\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n  ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodolistServerType) =>\r\n  ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) =>\r\n  ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) =>\r\n  ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistServerType>) =>\r\n  ({type: 'SET-TODOLISTS', todolists} as const)\r\n//status for disabling buttons (while requesting server)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) =>\r\n  ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\r\n\r\n\r\n//thunks\r\n\r\n// thunkCreator возвращает внутри себя санку (функция возвращает функцию)\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    //крутилку ставим перед запросом на серв\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n      //после ответа\r\n      .then(res => {\r\n          dispatch(setTodolistsAC(res))\r\n          //тд подгрузились, крутилку убираем\r\n          dispatch(setAppStatusAC('succeeded'))\r\n      }).catch((error) => handleServerNetworkError(error, dispatch))\r\n\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    //disable delete button for the TL to be deleted\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    //preloader\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n      //после ответа\r\n      .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //preloader cancel\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res, dispatch)\r\n            }\r\n        }\r\n      ).catch((error) => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    //preloader\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n      //получаем с сервера\r\n      .then(res => {\r\n          if (res.resultCode === 0) {\r\n              dispatch(addTodolistAC(res.data.item))\r\n              //preloader cancel\r\n              dispatch(setAppStatusAC('succeeded'))\r\n          } else {\r\n              handleServerAppError(res, dispatch)\r\n          }\r\n      }).catch((error) => handleServerNetworkError(error, dispatch))\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    //preloader\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n      //получаем с UI\r\n      .then(res => {\r\n          if (res.resultCode === 0) {\r\n              dispatch(changeTodoListTitleAC(todolistId, title))\r\n              //preloader cancel\r\n              dispatch(setAppStatusAC('succeeded'))\r\n          } else {\r\n              if (res.messages.length) {\r\n                  dispatch(setAppErrorAC(res.messages[0]))\r\n              } else {\r\n                  dispatch(setAppErrorAC('Some error occurred'))\r\n              }\r\n              dispatch(setAppStatusAC('failed'))\r\n          }\r\n      }).catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\n// types\r\n\r\n//типы для AC, кот. используются сразу в нескольких редьюсерах\r\n//т.к. их надо экспорт, мы создаем отдельные типы\r\nexport type AddTodoListActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistsAC>\r\n//правльная типизация AC-ов\r\ntype ActionsType =\r\n  | AddTodoListActionType\r\n  | RemoveTodoListActionType\r\n  | ReturnType<typeof changeTodoListTitleAC>\r\n  | ReturnType<typeof changeTodoListFilterAC>\r\n  | SetTodolistActionType\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n//дополняем тип, приходящий с сервера тем, что нужно UI\r\nexport type TodolistBusinessType = TodolistServerType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {AddTodoListActionType, RemoveTodoListActionType, SetTodolistActionType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// reducer\r\nconst initState: TasksStateType = {}\r\nexport const tasksReducer = (state: TasksStateType = initState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                //в нужном листе (из action id) фильтруем все таски, кроме той, что пришла в action\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                //находим в ассоциативном массиве по свойству в таске и подменяем на новый массив, где в начале будет\r\n                //новая таска из api, а дальше всё, что было раньше\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                //находим в ассоциативном массиве нужный лист по свойству в action\r\n                //map возвращает копию массива и пробегается по таскам, ищем нужную таску по свойству в action\r\n                //и меняем таску на копию с измененной моделькой из action (в ней сидит одно из свойств, кот. изм.)\r\n                [action.todolistId]: state[action.todolistId].map(task =>\r\n                  task.id === action.taskId ? {...task, ...action.model} : task)\r\n            }\r\n      //в этих редьюсерах мы должны обрабатывать action todolist редьюсера,\r\n      //так как, меняя листы, мы меняем и вторую часть стейта, отвечающуую за их таски\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                //добавляя новый лист, создаем пустой массив для его тасок\r\n                [action.todolist.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST': {\r\n            //скобки, т.к. создаем переменные\r\n            //нельзя записью прямо в объекте удалить массив тасок\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state};\r\n            //map создает массив, а forEach меняет существующий\r\n            //когда нам приходят листы с api, создаем для каждого пустой массив для их тасок\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS':\r\n            return {\r\n                ...state,\r\n                //находим нужный лист в ассоц. массиве по id из action и пихаем в него таски из action\r\n                [action.todolistId]: action.tasks\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\n\r\n//альтернативная запись функции, кот. возвращ. только объект\r\n//as const чтобы typescript воспринимал ADD-TODOLIST не как строку, а как конст(именно весь объект)\r\n//тоже самое что todolistId: todolistId, taskId: taskId\r\nexport const removeTaskAC = (todolistId: string, taskId: string) =>\r\n  ({type: 'REMOVE-TASK', todolistId, taskId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateBusinessTaskModelType) =>\r\n  ({type: 'UPDATE-TASK', taskId, todolistId, model} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n  ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n\r\n//thunks\r\n\r\n// thunkCreator возвращает внутри себя санку (функция возвращает функцию(\r\n//после первой функции => сразу возвращаем вторую (dispatch) =>\r\nexport const fetchTasksTC = (todolistId: string) =>\r\n  //возвращаем санку ( анонимная функция(название не имеет смысла))\r\n  (dispatch: Dispatch<ActionsType>) => {\r\n      //preloader\r\n      dispatch(setAppStatusAC('loading'))\r\n      tasksAPI.getTasks(todolistId)\r\n        //после ответа\r\n        .then(res => {\r\n            dispatch(setTasksAC(res.items, todolistId))\r\n            //preloader cancel\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n  }\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) =>\r\n  //возвращаем санку ( анонимная функция(название не имеет смысла))\r\n  (dispatch: Dispatch<ActionsType>) => {\r\n      //preloader ставим перед запросом на серв\r\n      dispatch(setAppStatusAC('loading'))\r\n      //сначала делаем запрос на сервер на удаление таски\r\n      tasksAPI.deleteTask(todolistId, taskId)\r\n        //только потом диспатчим изменение в наш state\r\n        .then(res => {\r\n              if (res.resultCode === 0) {\r\n                  const action = removeTaskAC(todolistId, taskId)\r\n                  dispatch(action)\r\n                  dispatch(setAppStatusAC('succeeded'))\r\n              } else {\r\n                  handleServerAppError(res, dispatch)\r\n              }\r\n          }\r\n        ).catch((error) => handleServerNetworkError(error, dispatch))\r\n  }\r\nexport const addTaskTC = (todolistId: string, title: string) =>\r\n  //возвращаем санку ( анонимная функция(название не имеет смысла))\r\n  (dispatch: Dispatch<ActionsType>) => {\r\n      //preloader\r\n      dispatch(setAppStatusAC('loading'))\r\n      tasksAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.item))\r\n                //preloader cancel\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res, dispatch)\r\n            }\r\n        }).catch(error => handleServerNetworkError(error, dispatch))\r\n  }\r\nexport const updateTaskTC = (todolistId: string, taskId: string, businessModel: UpdateBusinessTaskModelType) =>\r\n  //возвращаем санку ( анонимная функция(название не имеет смысла))\r\n  (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n      //preloader\r\n      dispatch(setAppStatusAC('loading'))\r\n      const state = getState()\r\n      //ищем нужную таскую\r\n      const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n      //на случай, если произойдет внештатная ошибка\r\n      if (!task) {\r\n          console.warn(\"task was not found in the state\")\r\n          return\r\n      }\r\n      //меняем только статус, остальное берем из getState\r\n      const serverModal: UpdateTaskModelType = {\r\n          //не делаем копию с помощью {...task, status: status} потому что в task находятся лишние данные\r\n          //не нужные серву (todoId, addedDate, id)\r\n          deadline: task.deadline,\r\n          description: task.description,\r\n          priority: task.priority,\r\n          startDate: task.startDate,\r\n          status: task.status,\r\n          title: task.title,\r\n          //тут будет 1 нужное для перезатирания свойство, оно перезапишет в serverModel\r\n          ...businessModel\r\n      }\r\n      tasksAPI.updateTask(todolistId, taskId, serverModal)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(updateTaskAC(todolistId, taskId, businessModel))\r\n                //preloader cancel\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res, dispatch)\r\n            }\r\n        }).catch(error => handleServerNetworkError(error, dispatch))\r\n  }\r\n\r\n\r\n// types\r\n\r\n//правльная типизация AC-ов\r\ntype ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | ReturnType<typeof setTasksAC>\r\n  | AddTodoListActionType\r\n  | RemoveTodoListActionType\r\n  | SetTodolistActionType\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n//тип нужен, чтобы сделать 1 TC на несколько операций апдейта таски, чтобы не отправлять сразу всё\r\nexport type UpdateBusinessTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string | null\r\n    deadline?: string | null\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"../features (pages)/TodolistsList/todolists-reducer\";\r\nimport {tasksReducer} from \"../features (pages)/TodolistsList/tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features (pages)/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    //в ветке app всё что касается апп в общем(напр. светлая/темная тема, язык прилож., какой юзер сейчас авториз.)\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n//создаем стор, дополняя его своим стейтом и подключаем Middleware из thunk\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//автоматическая типизация\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    //sometimes we need to disable Add button in some cases(удаляющийся TL)\r\n    disabled?: boolean\r\n}\r\n\r\n//React.memo предотвращает перерисовку когда приходят такие же пропсы\r\n//но т.к. нам приходит каждый раз одинаковый(для человека) коллбэк, а func это obj, а одинаковые объекты не равны\r\n//все равно происходит перерисовка, поэтому useCallback в addTask\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm rendered\")\r\n\r\n    /*локальный стейт инпута, синхронизируем value инпута с отрисовкой по клику новой таски в title*/\r\n    let [title, setTitle] = useState<string>(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    /*пихает из локального стейта в функцию addTask в App* и удаляет пробелы */\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is not required\")\r\n        }\r\n    };\r\n    /*перерисовка инпута, засовываем в локал стейт впечатанное значение инпута и убираем ошибку, впечатывая*/\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(null);\r\n    };\r\n    /*если нажат интер, то пихнуть в App*/\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        //чтобы setError не занулял ошибку при каждом нажатии клавиши\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        e.charCode === 13 && addItem()\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          <TextField value={title}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n                     variant=\"outlined\"\r\n            //Псевдоистина, тс блочит автомат. преобр. строки в булево, поэтому оператором делаем вручную\r\n                     error={!!error}\r\n                     label={\"Title\"}\r\n                     helperText={error}\r\n                     disabled={props.disabled}\r\n          />\r\n          <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n              <AddBox/>\r\n          </IconButton>\r\n      </div>\r\n    )\r\n} );\r\n\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    onChange: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n    console.log(\"EditableSpan is called\")\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState<string>(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        //if????????????????? disabled\r\n        if (props.disabled) {\r\n            setEditMode(false)\r\n        } else {\r\n            setEditMode(true);\r\n            setTitle(props.title);\r\n        }\r\n    }\r\n\r\n    const  activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) =>  e.charCode === 13 && activateViewMode();\r\n\r\n    return editMode\r\n      ? <TextField value={title}\r\n               autoFocus\r\n               onBlur={() => activateViewMode() }\r\n               onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n      />\r\n      : <span onDoubleClick={() => activateEditMode() }>{props.title}</span>\r\n} );\r\n\r\nexport default EditableSpan;","import {useDispatch} from \"react-redux\";\r\nimport {deleteTaskTC, updateTaskTC} from \"../../tasks-reducer\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {FilterValuesType} from \"../../todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/api\";\r\nimport EditableSpan from \"../../../../components (common)/EditableSpan/EditableSpan\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n    //дизейблим одновременно в TL, можно иначе, но нет UX-инженера :)\r\n    disabled?: boolean\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const RemoveTask = useCallback(() => {\r\n        dispatch(deleteTaskTC(props.todolistId, props.task.id))\r\n        },\r\n        //массив зависимостей (все, что используем извне)\r\n        [dispatch, props.task.id, props.todolistId]);\r\n    const ChangeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStatusValue = e.currentTarget.checked;\r\n        //отправляем в модельке только нужное для изменения свойство\r\n        dispatch(updateTaskTC(props.todolistId, props.task.id, {status: newStatusValue ? TaskStatuses.Completed : TaskStatuses.New}));\r\n    }, [dispatch, props.task.id, props.todolistId]);\r\n    const ChangeTaskTitle = useCallback((newValue: string) =>\r\n            //отправляем в модельке только нужное для изменения свойство\r\n            dispatch(updateTaskTC(props.todolistId, props.task.id, {title: newValue},)),\r\n        [dispatch, props.task.id, props.todolistId]);\r\n\r\n    return (\r\n        <li key={props.task.id}\r\n            className={props.filter !== \"completed\" && props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            {/*прозрачный класс добавится когда таска чекнута и не в фильтре комплитед*/}\r\n            <Checkbox checked={props.task.status === TaskStatuses.Completed} onChange={ChangeTaskStatus}\r\n                      color=\"primary\" disabled={props.disabled}/>\r\n            <EditableSpan title={props.task.title} onChange={ChangeTaskTitle} disabled={props.disabled}/>\r\n            <IconButton onClick={RemoveTask} disabled={props.disabled}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n});","import React, {useCallback, useEffect} from 'react'\r\nimport {Button, ButtonGroup, IconButton} from \"@material-ui/core\";\r\nimport {Delete, Home} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodolistTitleTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistBusinessType\r\n} from \"../todolists-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/api\";\r\nimport AddItemForm from \"../../../components (common)/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components (common)/EditableSpan/EditableSpan\";\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistBusinessType\r\n\r\n    //for storybook\r\n    demo?: boolean\r\n}\r\n//demo default value false (if (typeof demo === 'undefined') )\r\nexport const Todolist = React.memo( ( {demo = false, ...props}: TodoListPropsType) => {\r\n\r\n    console.log(\"Todolist is called\")\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    //первый дженерик тип глобал стейта, второй того, что мы селектим\r\n    //вместо mapStateToProps, храним здесь стейт, нужный для этой компоненты\r\n    const allTodoListTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.todolist.id])\r\n\r\n    //в неё кладем отсортированные таски (создаем тут, чтобы не создавать в каждом case)\r\n    //let потому что делаем ниже присваивания\r\n    let tasksForTodoList: Array<TaskType>;\r\n    switch (props.todolist.filter) {\r\n        case \"active\" :\r\n            tasksForTodoList = allTodoListTasks.filter(task => task.status === TaskStatuses.New)\r\n            break;\r\n        case \"completed\" :\r\n            tasksForTodoList = allTodoListTasks.filter(task => task.status === TaskStatuses.Completed)\r\n            break;\r\n        default :\r\n            tasksForTodoList = allTodoListTasks;\r\n            break;\r\n    }\r\n\r\n    //запоминает функцию и т.к. пустой [], то никогда не создавай новую функцию\r\n    //disp и AC не меняется и можно его не добавлять\r\n    //обязательно вставляем всё, от чего зависит функция извне (props.id)\r\n    const addTask = useCallback((title: string) => dispatch(addTaskTC(props.todolist.id, title)), [dispatch, props.todolist.id]);\r\n    const removeTodoList = useCallback(() => dispatch(removeTodolistTC(props.todolist.id)), [dispatch, props.todolist.id]);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        const thunk = changeTodolistTitleTC(props.todolist.id, newTitle);\r\n        dispatch(thunk)\r\n    }, [dispatch, props.todolist.id]);\r\n    //предполагаем, что в Button от MatUI внутри тоже есть React.memo, поэтому оборачиваем передаваемых в них коллбэк в useCallback\r\n    const changeFilter = useCallback((id: string, value: FilterValuesType) =>\r\n      dispatch(changeTodoListFilterAC(props.todolist.id, value)), [dispatch, props.todolist.id]);\r\n\r\n\r\n    useEffect(() => {\r\n        //убираем из storybook работу с сервером (после ретурна код не выполняется)\r\n        if(demo) return\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} onChange={changeTodoListTitle} disabled={props.todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodoList} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n            <ul>\r\n                {tasksForTodoList.map(task =>\r\n                    <Task\r\n                        task={task}\r\n                        filter={props.todolist.filter}\r\n                        todolistId={props.todolist.id}\r\n                        key={task.id}\r\n                        disabled={props.todolist.entityStatus === \"loading\"}\r\n                    />)}\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup>\r\n                    <Button onClick={() => changeFilter(props.todolist.id, \"all\")}\r\n                            variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                            color=\"primary\" endIcon={<Home/>}>All</Button>\r\n                    <Button onClick={() => changeFilter(props.todolist.id, \"active\")}\r\n                            variant={props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                            color=\"inherit\">Active</Button>\r\n                    <Button onClick={() => changeFilter(props.todolist.id, \"completed\")}\r\n                            variant={props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                            color=\"secondary\">Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistTC, fetchTodolistsTC, TodolistBusinessType} from \"./todolists-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components (common)/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n//for storybook\r\ntype PropsType = {demo?:boolean}\r\n\r\n//demo default value false (if (typeof demo === 'undefined') )\r\nexport const TodolistsList: React.FC<PropsType> = React.memo(({demo=false}) => {\r\n    const dispatch = useDispatch();\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistBusinessType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    //запоминает функцию и т.к. пустой [], то никогда не создавай новую функцию при перерисовке\r\n    //добавляем dispatch в [], просто чтобы реакт не ругался в консоли (disp не меняется и можно было бы его не добавлять)\r\n    const addTodoList = useCallback((title: string) => dispatch(addTodolistTC(title)), [dispatch])\r\n\r\n    useEffect(() => {\r\n        //убираем из storybook работу с сервером (после ретурна код не выполняется)\r\n        //а также не посылаем запрос на серв когда чел не залогинен\r\n        if(demo || !isLoggedIn) return\r\n        //самая первая загрузка листов\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    //если не залогинен и находишься на странице тудулистов, то редирект на логин\r\n    //делаем в самом конце, чтобы хуки выше не попадали под else(хуки нельзя в условиях и циклах)\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n      <>\r\n          <Grid container style={{padding: \"20px\"}}>\r\n              <AddItemForm addItem={addTodoList}/>\r\n          </Grid>\r\n          <Grid container spacing={3}>\r\n              {\r\n                  todolists.map(todolist => {\r\n\r\n                      return (\r\n                        <Grid item key={todolist.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist\r\n                                  todolist={todolist}\r\n\r\n                                  demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                      )\r\n                  })\r\n              }\r\n          </Grid>\r\n      </>)\r\n});","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n//всплывашка с ошибкой\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    let error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    let dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    //show only when error isn't null\r\n    const isOpen = error !== null\r\n    return (\r\n      <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity=\"error\">{error}</Alert>\r\n      </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        //вызывает проверку на каждом печатаемом символе\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            //ошибки поля email\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            //ошибки поля password\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Password must be at least 4 characters'\r\n            }\r\n            return errors;\r\n        },\r\n        //в теге form - handleSubmit ссылка на этот коллбек, он принимает в себя значения из полей\r\n        //в виде объекта {имя поля: введенное значение,...}\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n    //если залогинен и находишься на странице логина, то редирект на главную страницу\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                          label=\"Email\"\r\n                          margin=\"normal\"\r\n                          {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                          type=\"password\"\r\n                          label=\"Password\"\r\n                          margin=\"normal\"\r\n                          {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                          label={'Remember me'}\r\n                          control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                             checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Menu, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {TodolistsList} from \"../features (pages)/TodolistsList/TodolistsList\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress/LinearProgress';\r\nimport {ErrorSnackbar} from \"../components (common)/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features (pages)/Login/Login\";\r\nimport {logoutTC} from \"../features (pages)/Login/auth-reducer\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\n\r\n//for storybook\r\ntype PropsType = { demo?: boolean }\r\n\r\n//demo default value false (if (typeof demo === 'undefined') )\r\nfunction App({demo = false}: PropsType) {\r\n    let dispatch = useDispatch();\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n\r\n    //сработает только 1 раз, поменяет isLoggedIn на true и поэтому перерисуется с крутилки на приложение\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    const logoutHandler = useCallback(() => dispatch(logoutTC()), [])\r\n    //если еще не инициализировалось(не успело отправить get me залогинен ли юзер), то показывать крутилку\r\n    if (!isInitialized) {\r\n        return <div\r\n          style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <AppBar position=\"static\">\r\n              <Toolbar>\r\n                  <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                      <Menu open={false}/>\r\n                  </IconButton>\r\n                  <Typography variant=\"h6\">\r\n                      News\r\n                  </Typography>\r\n                  {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n              </Toolbar>\r\n          </AppBar>\r\n          {status === \"loading\" && <div className=\"progress-bar\"><LinearProgress color=\"secondary\"/></div>}\r\n          <Container fixed>\r\n              <Switch>\r\n                  <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                  <Route path={'/login'} render={() => <Login/>}/>\r\n                  {/* redirect to /404 if we have not that path in routes */}\r\n                  <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                  <Redirect from={'*'} to={'/404'}/>\r\n              </Switch>\r\n          </Container>\r\n          <ErrorSnackbar/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from './app/App';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  //провайдер расшаривает стор для всех своих детей\r\n\r\n  <Provider store={store}>\r\n      <HashRouter>\r\n          <App/>\r\n      </HashRouter>\r\n  </Provider>,\r\n\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}